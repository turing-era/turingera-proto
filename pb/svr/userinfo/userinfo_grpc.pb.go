// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: userinfo.proto

package userinfo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserinfoClient is the client API for Userinfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserinfoClient interface {
	// 获取用户信息
	GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoRsp, error)
}

type userinfoClient struct {
	cc grpc.ClientConnInterface
}

func NewUserinfoClient(cc grpc.ClientConnInterface) UserinfoClient {
	return &userinfoClient{cc}
}

func (c *userinfoClient) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoRsp, error) {
	out := new(GetUserInfoRsp)
	err := c.cc.Invoke(ctx, "/turingera.svr.userinfo.Userinfo/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserinfoServer is the server API for Userinfo service.
// All implementations must embed UnimplementedUserinfoServer
// for forward compatibility
type UserinfoServer interface {
	// 获取用户信息
	GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoRsp, error)
	mustEmbedUnimplementedUserinfoServer()
}

// UnimplementedUserinfoServer must be embedded to have forward compatible implementations.
type UnimplementedUserinfoServer struct {
}

func (UnimplementedUserinfoServer) GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUserinfoServer) mustEmbedUnimplementedUserinfoServer() {}

// UnsafeUserinfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserinfoServer will
// result in compilation errors.
type UnsafeUserinfoServer interface {
	mustEmbedUnimplementedUserinfoServer()
}

func RegisterUserinfoServer(s grpc.ServiceRegistrar, srv UserinfoServer) {
	s.RegisterService(&Userinfo_ServiceDesc, srv)
}

func _Userinfo_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserinfoServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/turingera.svr.userinfo.Userinfo/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserinfoServer).GetUserInfo(ctx, req.(*GetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Userinfo_ServiceDesc is the grpc.ServiceDesc for Userinfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Userinfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "turingera.svr.userinfo.Userinfo",
	HandlerType: (*UserinfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserInfo",
			Handler:    _Userinfo_GetUserInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userinfo.proto",
}
