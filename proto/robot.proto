syntax = "proto3";
package turingera.server.robot;
option go_package = "github.com/turing-era/turingera-proto/go/server/robot";

message Identity {
  string id = 1;
  string role = 2;
  string desc = 3;
}

message Gender {
  uint32 id = 1;
  string name_en = 2;
}

message RobotBasic {
  string robot_id = 1;
  string user_id = 2;
  string name = 3;
  string avatar = 4;
  string location = 5;

  int64 create_time = 20;
  RobotDynamic dynamic = 50;
}

message SubDialogueStyle {
  uint32 cate = 1;
  string sub_style = 2;
}

message DialogueStyle {
  string main = 1;
  repeated SubDialogueStyle subs = 2;
}

message Core {
  uint32 age = 1; // 年龄
  Gender gender = 2; // 性别
  Identity identity = 3; // 身份
  DialogueStyle dialogue_style = 4; // 对话风格
}

message MoodValue {
  int32 joy = 1;
  int32 fear = 2;
  int32 trust = 3;
  int32 surprise = 4;
}

message PersonalityValue {
  int32 positive = 1;
  int32 peaceful = 2;
  int32 open = 3;
  int32 extravert = 4;
}

message Personality {
  repeated string character_traits = 1;
  MoodValue mood = 2;
  PersonalityValue personality = 3;
}

message Phrase {
  string phrase = 1;
  string meaning = 2;
  string example = 3;
}

message PhraseComb {
  string id = 1;
  repeated Phrase rows = 2;
}

message Experience {
  string id = 1;
  string question = 2;
  string answer = 3;
}

message RobotDynamic {
  int32 score = 1; // 积分
  uint32 game_total = 2; // 总场数
  uint32 game_win = 3; // 胜利数
}

message RobotDetail {
  string robot_id = 1;
  Core core = 2;
  Personality personality = 3;
  PhraseComb phrase = 4;
  repeated Experience experiences = 5;

  bool use_knowledge = 20; // 是否使用自定义知识库
}

message GetEditOptionsReq {

}

message GetEditOptionsRsp {
  repeated Gender genders = 1;
  repeated Identity identities = 2;
  repeated DialogueStyle dialogue_styles = 3;
  repeated PhraseComb phrase_comb = 4;
}

message GetRobotReq {
  string robot_id = 1;
  bool need_detail = 2;
}

message GetRobotRsp {
  RobotBasic robot = 1;
  RobotDetail detail = 2;
}

message NewRobotReq {
  RobotBasic robot = 1;
  RobotDetail detail = 2;
}

message NewRobotRsp {
  RobotBasic robot = 1;
  RobotDetail detail = 2;
}

message EditRobotReq {
  RobotBasic robot = 1;
  RobotDetail detail = 2;
}

message EditRobotRsp {
  RobotBasic robot = 1;
  RobotDetail detail = 2;
}

message DeleteRobotReq {
  string robot_id = 1;
}

message DeleteRobotRsp {

}

message GetMyRobotsReq {
}

message GetMyRobotsRsp {
  repeated RobotBasic robots = 1;
}

message RecommendRobotsReq {

}

message RecommendRobotsRsp {
  repeated RobotBasic robots = 1;
}

message RandomRobotIDReq {

}

message RandomRobotIDRsp {
  string robot_id = 1;
}

message UpdateDynamicReq {
  string robot_id = 1;
  RobotDynamic dynamic = 2;
}

message UpdateDynamicRsp {
}

message UpdateUseKnowledgeReq {
  string robot_id = 1;
  bool use_knowledge = 2;
}

message UpdateUseKnowledgeRsp {

}

service RobotSvr {
  // 获取编辑选项
  rpc GetEditOptions (GetEditOptionsReq) returns (GetEditOptionsRsp);
  // 获取AI信息
  rpc GetRobot (GetRobotReq) returns (GetRobotRsp);
  // 新建AI
  rpc NewRobot (NewRobotReq) returns (NewRobotRsp);
  // 编辑AI
  rpc EditRobot (EditRobotReq) returns (EditRobotRsp);
  // 删除AI
  rpc DeleteRobot(DeleteRobotReq) returns (DeleteRobotRsp);
  // 获取我的AI列表
  rpc GetMyRobots (GetMyRobotsReq) returns (GetMyRobotsRsp);
  // 推荐AI列表
  rpc RecommendRobots (RecommendRobotsReq) returns (RecommendRobotsRsp);
  // 随机AI
  rpc RandomRobotID (RandomRobotIDReq) returns (RandomRobotIDRsp);
  // 更新动态数据
  rpc UpdateDynamic (UpdateDynamicReq) returns (UpdateDynamicRsp);
  // 更新是否使用知识库
  rpc UpdateUseKnowledge (UpdateUseKnowledgeReq) returns (UpdateUseKnowledgeRsp);
}