// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: rank.proto

package rank

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RankSvrClient is the client API for RankSvr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RankSvrClient interface {
	// 拉取排行榜
	GetRankList(ctx context.Context, in *GetRankListReq, opts ...grpc.CallOption) (*GetRankListRsp, error)
	// 同步分数
	UpdateScore(ctx context.Context, in *UpdateScoreReq, opts ...grpc.CallOption) (*UpdateScoreRsp, error)
}

type rankSvrClient struct {
	cc grpc.ClientConnInterface
}

func NewRankSvrClient(cc grpc.ClientConnInterface) RankSvrClient {
	return &rankSvrClient{cc}
}

func (c *rankSvrClient) GetRankList(ctx context.Context, in *GetRankListReq, opts ...grpc.CallOption) (*GetRankListRsp, error) {
	out := new(GetRankListRsp)
	err := c.cc.Invoke(ctx, "/turingera.server.rank.RankSvr/GetRankList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankSvrClient) UpdateScore(ctx context.Context, in *UpdateScoreReq, opts ...grpc.CallOption) (*UpdateScoreRsp, error) {
	out := new(UpdateScoreRsp)
	err := c.cc.Invoke(ctx, "/turingera.server.rank.RankSvr/UpdateScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RankSvrServer is the server API for RankSvr service.
// All implementations must embed UnimplementedRankSvrServer
// for forward compatibility
type RankSvrServer interface {
	// 拉取排行榜
	GetRankList(context.Context, *GetRankListReq) (*GetRankListRsp, error)
	// 同步分数
	UpdateScore(context.Context, *UpdateScoreReq) (*UpdateScoreRsp, error)
	mustEmbedUnimplementedRankSvrServer()
}

// UnimplementedRankSvrServer must be embedded to have forward compatible implementations.
type UnimplementedRankSvrServer struct {
}

func (UnimplementedRankSvrServer) GetRankList(context.Context, *GetRankListReq) (*GetRankListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRankList not implemented")
}
func (UnimplementedRankSvrServer) UpdateScore(context.Context, *UpdateScoreReq) (*UpdateScoreRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScore not implemented")
}
func (UnimplementedRankSvrServer) mustEmbedUnimplementedRankSvrServer() {}

// UnsafeRankSvrServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RankSvrServer will
// result in compilation errors.
type UnsafeRankSvrServer interface {
	mustEmbedUnimplementedRankSvrServer()
}

func RegisterRankSvrServer(s grpc.ServiceRegistrar, srv RankSvrServer) {
	s.RegisterService(&RankSvr_ServiceDesc, srv)
}

func _RankSvr_GetRankList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRankListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankSvrServer).GetRankList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/turingera.server.rank.RankSvr/GetRankList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankSvrServer).GetRankList(ctx, req.(*GetRankListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankSvr_UpdateScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankSvrServer).UpdateScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/turingera.server.rank.RankSvr/UpdateScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankSvrServer).UpdateScore(ctx, req.(*UpdateScoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RankSvr_ServiceDesc is the grpc.ServiceDesc for RankSvr service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RankSvr_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "turingera.server.rank.RankSvr",
	HandlerType: (*RankSvrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRankList",
			Handler:    _RankSvr_GetRankList_Handler,
		},
		{
			MethodName: "UpdateScore",
			Handler:    _RankSvr_UpdateScore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rank.proto",
}
